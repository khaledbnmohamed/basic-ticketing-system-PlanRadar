# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
RSpec.describe '/api/v1/users/user_id/' do
  path '/api/v1/users/{user_id}/' do
    post 'create user' do
      consumes 'application/json'
      produces 'application/json'

      parameter name: :user_id, in: :path, type: :integer, required: true

      parameter name: :user, in: :body, schema: {
        type: :object,
        properties: {
          user_id: { type: :string }
        }
      }
      response '200', 'create user succefully' do

        it 'create user succsfully' do
          post "/api/v1/users",
               params: {
                 user: {
                   name: 'First user',
                   password_diget: "12345",
                   email: "test@hotmail.com",
                   mobile: "123"
                 }
               }
          expect(response).to have_http_status(:success)
          expect(response.parsed_body['name']).to eq('First user')
          expect(response.parsed_body['email']).to eq('test@hotmail.com')
        end

      end
    end
  end

end
